export enum PropertyName {
  // Binary Property Names
  gc,
  General_Category = gc,
  sc,
  Script = sc,
  scx,
  Script_Extension = scx,

  // Non binary property names
  Any,
  ASCII,
  AHex,
  ASCII_Hex_Digit = AHex,
  Alpha,
  Alphabetic = Alpha,
  Bidi_M,
  Bidi_Mirrored = Bidi_M,
  Bidi_C,
  Bidi_Control = Bidi_C,
  CI,
  Case_Ignorable = CI,
  Cased,
  CWCF,
  Changes_When_Casefolded = CWCF,
  CWCM,
  Changes_When_Casemapped = CWCM,
  CWL,
  Changes_When_Lowercased = CWL,
  CWKCF,
  Changes_When_NFKC_Casefolded = CWKCF,
  CWT,
  Changes_When_Titlecased = CWT,
  CWU,
  Changes_When_Uppercased = CWU,
  Dash,
  DI,
  Default_Ignorable_Code_Point = DI,
  Dep,
  Deprecated = Dep,
  Dia,
  Diacritic = Dia,
  Emoji,
  Emoji_Component,
  Emoji_Modifier,
  Emoji_Modifier_Base,
  Emoji_Presentation,
  Ext,
  Extender = Ext,
  Gr_Base,
  Grapheme_Base = Gr_Base,
  Gr_Ext,
  Grapheme_Extend = Gr_Ext,
  Hex,
  Hex_Digit = Hex,
  IDSB,
  IDS_Binary_Operator = IDSB,
  IDST,
  IDS_Trinary_Operator = IDST,
  IDC,
  ID_Continue = IDC,
  IDS,
  ID_Start = IDS,
  Ideo,
  Ideographic = Ideo,
  Join_C,
  Join_Control = Join_C,
  LOE,
  Logical_Order_Exception = LOE,
  Lower,
  Lowercase = Lower,
  Math,
  NChar,
  Noncharacter_Code_Point = NChar,
  Pat_Syn,
  Pattern_Syntax = Pat_Syn,
  Pat_WS,
  Pattern_White_Space = Pat_WS,
  QMark,
  Quotation_Mark = QMark,
  Radical,
  RI,
  Regional_Indicator = RI,
  STerm,
  Sentence_Terminal = STerm,
  SD,
  Soft_Dotted = SD,
  Term,
  Terminal_Punctuation = Term,
  UIdeo,
  Unified_Ideograph = UIdeo,
  Upper,
  Uppercase = Upper,
  VS,
  Variation_Selector = VS,
  space,
  White_Space = space,
  XIDC,
  XID_Continue = XIDC,
  XIDS,
  XID_Start = XIDS,
}

export enum PropertyValue {
  // General Category proeprty values
  LC,
  Cased_Letter = LC,
  Pe,
  Close_Punctuation = Pe,
  Pc,
  Connector_Punctuation = Pc,
  Cc,
  cntrl = Cc,
  Control = Cc,
  Sc,
  Currency_Symbol = Sc,
  Pd,
  Dash_Punctuation = Pd,
  Nd,
  digit = Nd,
  Decimal_Number = digit,
  Me,
  Enclosing_Mark = Me,
  Pf,
  Final_Punctuation = Pf,
  Cf,
  Format = Cf,
  Pi,
  Initial_Punctuation = Pi,
  L,
  Letter = L,
  Nl,
  Letter_Number = Nl,
  Zl,
  Line_Separator = Zl,
  Ll,
  Lowercase_Letter = Ll,
  M,
  Combining_Mark = M,
  Mark,
  Sm,
  Math_Symbol = Sm,
  Lm,
  Modifier_Letter = Lm,
  Sk,
  Modifier_Symbol = Sk,
  Mn,
  Nonspacing_Mark = Mn,
  N,
  Number = N,
  Ps,
  Open_Punctuation = Ps,
  C,
  Other = C,
  Lo,
  Other_Letter = Lo,
  No,
  Other_Number = No,
  Po,
  Other_Punctuation = Po,
  So,
  Other_Symbol = So,
  Zp,
  Paragraph_Separator = Zp,
  Co,
  Private_Use = Co,
  P,
  punct = P,
  Punctuation = P,
  Z,
  Separator = Z,
  Zs,
  Space_Separator = Zs,
  Mc,
  Spacing_Mark = Mc,
  Cs,
  Surrogate = Cs,
  S,
  Symbol = S,
  Lt,
  Titlecase_Letter = Lt,
  Cn,
  Unassigned = Cn,
  Lu,
  Uppercase_Letter = Lu,
  // Script and Script Extension proeprty values
}

export function propertyNameFor(value: string): PropertyName {
  value = value.trim();
  if (!(value in PropertyName)) {
    throw new SyntaxError("Invalid property name: " + value);
  }
  return (PropertyName as any)[value];
}

export function propertyValueFor(value: string): PropertyValue {
  value = value.trim();
  if (!(value in PropertyValue)) {
    throw new SyntaxError("Invalid property value: " + value);
  }
  return (PropertyValue as any)[value];
}

export function propertyNameString(value: number): string {
  if (!(value in PropertyName)) {
    throw new Error("Invalid property name: " + value);
  }
  return PropertyName[value];
}

export function propertyValueString(value: number): string {
  if (!(value in PropertyValue)) {
    throw new Error("Invalid property value: " + value);
  }
  return PropertyValue[value];
}
